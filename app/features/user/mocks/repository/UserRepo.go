// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	user "github.com/ropel12/project-3/app/features/user"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: db, _a1
func (_m *UserRepo) Create(db *gorm.DB, _a1 user.User) error {
	ret := _m.Called(db, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, user.User) error); ok {
		r0 = rf(db, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: db, _a1
func (_m *UserRepo) Delete(db *gorm.DB, _a1 user.User) error {
	ret := _m.Called(db, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, user.User) error); ok {
		r0 = rf(db, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEmail provides a mock function with given fields: db, email
func (_m *UserRepo) FindByEmail(db *gorm.DB, email string) (*user.User, error) {
	ret := _m.Called(db, email)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) (*user.User, error)); ok {
		return rf(db, email)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) *user.User); ok {
		r0 = rf(db, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(db, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: db, _a1
func (_m *UserRepo) Update(db *gorm.DB, _a1 user.User) (*user.User, error) {
	ret := _m.Called(db, _a1)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, user.User) (*user.User, error)); ok {
		return rf(db, _a1)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, user.User) *user.User); ok {
		r0 = rf(db, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, user.User) error); ok {
		r1 = rf(db, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepo(t mockConstructorTestingTNewUserRepo) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

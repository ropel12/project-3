// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	event "github.com/ropel12/project-3/app/features/event"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// EventRepo is an autogenerated mock type for the EventRepo type
type EventRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: db, data
func (_m *EventRepo) Create(db *gorm.DB, data event.Event) (*int, error) {
	ret := _m.Called(db, data)

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, event.Event) (*int, error)); ok {
		return rf(db, data)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, event.Event) *int); ok {
		r0 = rf(db, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, event.Event) error); ok {
		r1 = rf(db, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEventRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventRepo creates a new instance of EventRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventRepo(t mockConstructorTestingTNewEventRepo) *EventRepo {
	mock := &EventRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
